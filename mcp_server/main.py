# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:03:44+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub

from models import (
    DistrictAdminResponse,
    DistrictAdminsResponse,
    DistrictResponse,
    DistrictsResponse,
    DistrictStatusResponses,
    GradeLevelsResponse,
    NotFound,
    SchoolAdminResponse,
    SchoolAdminsResponse,
    SchoolResponse,
    SchoolsResponse,
    SectionResponse,
    SectionsResponse,
    StudentContactResponse,
    StudentContactsForStudentResponse,
    StudentContactsResponse,
    StudentResponse,
    StudentsResponse,
    TeacherResponse,
    TeachersResponse,
)

app = MCPProxy(
    contact={'x-twitter': 'clever'},
    description='Serves the Clever Data API',
    title='Data API',
    version='1.2.0',
    servers=[{'url': 'https://api.clever.com/v1.2'}],
)


@app.get(
    '/contacts',
    description=""" Returns a list of student contacts """,
    tags=['institution_relationships', 'district_management', 'school_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_contacts(
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/contacts/{id}',
    description=""" Returns a specific student contact """,
    tags=['contact_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_contact(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/contacts/{id}/district',
    description=""" Returns the district for a student contact """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district_for_student_contact(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/contacts/{id}/student',
    description=""" Returns the student for a student contact """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_student_for_contact(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/district_admins',
    description=""" Returns a list of district admins """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district_admins(
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    show_links: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/district_admins/{id}',
    description=""" Returns a specific district admin """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district_admin(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/districts',
    description=""" Returns a list of districts. In practice this will only return the one district associated with the bearer token """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_districts():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/districts/{id}',
    description=""" Returns a specific district """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district(id: str, include: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/districts/{id}/admins',
    description=""" Returns the admins for a district """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_admins_for_district(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/districts/{id}/schools',
    description=""" Returns the schools for a district """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_schools_for_district(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/districts/{id}/sections',
    description=""" Returns the sections for a district """,
    tags=['student_management', 'section_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sections_for_district(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/districts/{id}/status',
    description=""" Returns the status of the district """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district_status(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/districts/{id}/students',
    description=""" Returns the students for a district """,
    tags=['student_management', 'district_management', 'school_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_students_for_district(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/districts/{id}/teachers',
    description=""" Returns the teachers for a district """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teachers_for_district(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/school_admins',
    description=""" Returns a list of school admins """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_school_admins(
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/school_admins/{id}',
    description=""" Returns a specific school admin """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_school_admin(id: str, include: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/school_admins/{id}/schools',
    description=""" Returns the schools for a school admin """,
    tags=['district_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_schools_for_school_admin(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/schools',
    description=""" Returns a list of schools """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_schools(
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/schools/{id}',
    description=""" Returns a specific school """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_school(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/schools/{id}/district',
    description=""" Returns the district for a school """,
    tags=['contact_management', 'student_management', 'teacher_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district_for_school(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/schools/{id}/sections',
    description=""" Returns the sections for a school """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sections_for_school(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/schools/{id}/students',
    description=""" Returns the students for a school """,
    tags=['institution_relationships'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_students_for_school(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/schools/{id}/teachers',
    description=""" Returns the teachers for a school """,
    tags=['student_management', 'contact_management', 'district_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teachers_for_school(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sections',
    description=""" Returns a list of sections """,
    tags=['contact_management', 'student_management', 'teacher_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sections(
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sections/{id}',
    description=""" Returns a specific section """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_section(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sections/{id}/district',
    description=""" Returns the district for a section """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district_for_section(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sections/{id}/school',
    description=""" Returns the school for a section """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_school_for_section(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sections/{id}/students',
    description=""" Returns the students for a section """,
    tags=['contact_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_students_for_section(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sections/{id}/teacher',
    description=""" Returns the primary teacher for a section """,
    tags=['contact_management', 'student_management', 'district_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teacher_for_section(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sections/{id}/teachers',
    description=""" Returns the teachers for a section """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teachers_for_section(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/students',
    description=""" Returns a list of students """,
    tags=['student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_students(
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/students/{id}',
    description=""" Returns a specific student """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_student(id: str, include: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/students/{id}/contacts',
    description=""" Returns the contacts for a student """,
    tags=['contact_management', 'district_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_contacts_for_student(id: str, limit: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/students/{id}/district',
    description=""" Returns the district for a student """,
    tags=['contact_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district_for_student(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/students/{id}/school',
    description=""" Returns the primary school for a student """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_school_for_student(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/students/{id}/sections',
    description=""" Returns the sections for a student """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sections_for_student(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/students/{id}/teachers',
    description=""" Returns the teachers for a student """,
    tags=['contact_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teachers_for_student(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teachers',
    description=""" Returns a list of teachers """,
    tags=[
        'contact_management',
        'district_management',
        'school_management',
        'section_management',
        'student_management',
        'teacher_management',
        'institution_relationships',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teachers(
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
    where: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teachers/{id}',
    description=""" Returns a specific teacher """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teacher(id: str, include: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teachers/{id}/district',
    description=""" Returns the district for a teacher """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_district_for_teacher(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teachers/{id}/grade_levels',
    description=""" Returns the grade levels for sections a teacher teaches """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_grade_levels_for_teacher(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teachers/{id}/school',
    description=""" Retrieves school info for a teacher. """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_school_for_teacher(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teachers/{id}/sections',
    description=""" Returns the sections for a teacher """,
    tags=['student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sections_for_teacher(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teachers/{id}/students',
    description=""" Returns the students for a teacher """,
    tags=['contact_management', 'student_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_students_for_teacher(
    id: str,
    limit: Optional[int] = None,
    starting_after: Optional[str] = None,
    ending_before: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
